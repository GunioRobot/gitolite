#!/usr/bin/perl

use strict;
use warnings;

# === update ===
# this is gitolite's update hook

# part of the gitolite (GL) suite

# how run:      via git, being copied as .git/hooks/update in every repo
# when:         every push
# input:
#     - see man githooks for STDIN
#     - uses the compiled config file to get permissions info
# output:       based on permissions etc., exit 0 or 1
# security:
#     - none

# robustness:

# other notes:

# ----------------------------------------------------------------------------
#       common definitions
# ----------------------------------------------------------------------------

our ($GL_CONF_COMPILED, $PERSONAL);
our %repos;

# we should already have the GL_RC env var set when we enter this hook
die "parse $ENV{GL_RC} failed: "       . ($! or $@) unless do $ENV{GL_RC};
# then "do" the compiled config file, whose name we now know
die "parse $GL_CONF_COMPILED failed: " . ($! or $@) unless do $GL_CONF_COMPILED;

# ----------------------------------------------------------------------------
#       start...
# ----------------------------------------------------------------------------

my $ref = shift;
my $oldsha = shift;
my $newsha = shift;
my $merge_base = '0' x 40;
# compute a merge-base if both SHAs are non-0, else leave it as '0'x40
# (i.e., for branch create or delete, merge_base == '0'x40)
chomp($merge_base = `git merge-base $oldsha $newsha`)
    unless $oldsha eq '0' x 40
        or $newsha eq '0' x 40;

# what are you trying to do?  (is it 'W' or '+'?)
my $perm = 'W';
# rewriting a tag is considered a rewind, in terms of permissions
$perm = '+' if $ref =~ m(refs/tags/) and $oldsha ne ('0' x 40);
# non-ff push to ref
# notice that ref delete looks like a rewind, as it should
$perm = '+' if $oldsha ne $merge_base;

my @allowed_refs;
# personal stuff -- right at the start in the new regime, I guess!
push @allowed_refs, { "$PERSONAL/$ENV{GL_USER}/" => "RW+" } if $PERSONAL;
# we want specific perms to override @all, so they come first
push @allowed_refs, @ { $repos{$ENV{GL_REPO}}{$ENV{GL_USER}} || [] };
push @allowed_refs, @ { $repos{$ENV{GL_REPO}}{'@all'} || [] };

# prepare the list of refs to be checked

# previously, we just checked $ref -- the ref being updated, which is passed
# to us by git (see man githooks).  Now we also have to treat each NAME being
# updated as a potential "ref" and check that, if NAME-based restrictions have
# been specified.  And then SIZE/1000000 [maximum size of *new* objects
# created], and COUNT/10 [maximum number of objects changed] type of refs
# (both are upper limits; lower limits don't make sense)

my @refs = ($ref);      # the first ref to check is the real one

# ----------------------------------------------------------------------------
#       a couple of quick subroutines as a diversion :)
# ----------------------------------------------------------------------------

# get the max permissible value for SIZE/nnn and COUNT/nnn type refexes from
# the list of allowed_refs for this repo+user combo
sub get_max
{
    my ($key, $perm, @refs) = @_;
    my $max = 0;
    for my $r (@refs) {
        my $refex = (keys %$r)[0];
        # the refex should have a value that contains $perm ("W" or "+")
        next unless ($r->{$refex} =~ /\Q$perm/);
        # it should be SIZE/nnn or COUNT/nnn
        next unless $refex =~ /^$key\/(\d+)$/;
        # the largest such value is what we will finally use as a limit
        $max = $1 if $max < $1;
    }

    return $max;
}

# add NAME/ refexes to the list.  While you're about it, also check SIZE/ and
# COUNT/ for compliance
sub add_more_refs
{
    # uses package global %repos and 2 arguments
    my ($oldsha, $newsha, $perm, @allowed_refs) = @_;

    my @refs = ();

    # this is special to git -- the hash of an empty tree
    my $empty='4b825dc642cb6eb9a060e54bf8d69288fbee4904';
    # well they're not really "trees" but $empty is indeed the empty tree so
    # we can just pretend $oldsha/$newsha are also trees, and anyway 'git
    # diff' only wants trees
    my $oldtree = $oldsha eq '0' x 40 ? $empty : $oldsha;
    my $newtree = $newsha eq '0' x 40 ? $empty : $newsha;

    # the first two tests don't actually add refs; we check straightaway --
    # both tests consist of eventually comparing two numbers anyway.

    if (exists $repos{$ENV{GL_REPO}}{SIZE_LIMITS}) {
        chomp(my $actual_max = `git diff --diff-filter=A --raw --abbrev=40 $oldtree $newtree |cut -f4 -d' ' | xargs -r git cat-file -s | sort -nr | head -1`);
        my $allowed_max = &get_max('SIZE', $perm, @allowed_refs);
        die "$ENV{GL_USER} DENIED; largest new blob is $actual_max, max allowed is $allowed_max\n"
            if ($actual_max and $allowed_max and $actual_max > $allowed_max);
    }

    if (exists $repos{$ENV{GL_REPO}}{COUNT_LIMIT}) {
        chomp(my $actual_count = `git diff --name-only $oldtree $newtree | wc -l`);
        my $allowed_count = &get_max('COUNT', $perm, @allowed_refs);
        die "$ENV{GL_USER} DENIED; $actual_count blobs changed, max allowed is $allowed_count\n"
            if ($actual_count and $allowed_count and $actual_count > $allowed_count);
    }

    # this one, however, adds refexes to the list to be checked

    if (exists $repos{$ENV{GL_REPO}}{NAME_LIMITS}) {
        push @refs, map { chomp; s/^/NAME\//; $_; } `git diff --name-only $oldtree $newtree`;
    }

    return @refs;
}

# ----------------------------------------------------------------------------
#       and now, we return you to your regularly scheduled programming!
# ----------------------------------------------------------------------------

push @refs, &add_more_refs($oldsha, $newsha, $perm, @allowed_refs);

my $refex = '';

# check one ref
sub check_ref {

    # normally, the $ref will be whatever ref the commit is trying to update
    # (like refs/heads/master or whatever).  At least one of the refexes that
    # pertain to this user must match this ref **and** the corresponding
    # permission must also match the action (W or +) being attempted.  If none
    # of them match, the access is denied.

    # Notice that the function DIES!!!  Any future changes that require more
    # work to be done *after* this, even on failure, can start using return
    # codes etc., but for now we're happy to just die.

    my $ref = shift;
    for my $ar (@allowed_refs) {
        $refex = (keys %$ar)[0];
        # refex?  sure -- a regex to match a ref against :)
        next unless $ref =~ /^$refex/;
        die "$perm $ref $ENV{GL_USER} DENIED by $refex\n" if $ar->{$refex} eq '-';

        # as far as *this* ref is concerned we're ok
        return $refex if ($ar->{$refex} =~ /\Q$perm/);
    }
    die "$perm $ref $ENV{GL_REPO} $ENV{GL_USER} DENIED by fallthru\n";
}

# and in this version, we have many "refs" to check.  The one we print in the
# log is the *first* one (which is a *real* ref, like refs/heads/master),
# while all the rest (if they exist) are like NAME/something.  So we do the
# first one separately to capture it, then run the rest (if any)
my $log_refex = check_ref(shift @refs);
check_ref($_) for @refs;

# if we returned at all, all the checks succeeded, so we log the action and exit 0

# logging note: if log failure isn't important enough to block pushes, get rid
# of all the error checking
open my $log_fh, ">>", $ENV{GL_LOG} or die "open log failed: $!\n";
print $log_fh "$ENV{GL_TS}  $perm\t" .
    substr($oldsha, 0, 14) . "\t" . substr($newsha, 0, 14) .
    "\t$ENV{GL_REPO}\t$ref\t$ENV{GL_USER}\t$log_refex\n";
close $log_fh or die "close log failed: $!\n";
exit 0;
